name: SonarQube Scan with Docker (Dynamic Project Key)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  sonar-docker:
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: >-
          --memory=4g

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3️⃣ Install dependencies (optional)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest coverage jq unzip

          # Install sonar-scanner CLI
          curl -sSLo sonar-scanner.zip \
            https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME/
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      # 4️⃣ Wait for SonarQube server to be ready
      - name: Wait for SonarQube startup
        run: |
          echo "⏳ Waiting for SonarQube server to be healthy..."
          for i in {1..60}; do
            STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
            echo "Attempt $i: SonarQube status = $STATUS"
            if [ "$STATUS" == "UP" ]; then
              echo "✅ SonarQube is UP!"
              break
            fi
            sleep 5
          done
          if [ "$STATUS" != "UP" ]; then
            echo "❌ SonarQube did not start in time!"
            exit 1
          fi

      # 5️⃣ Generate temporary SonarQube token
      - name: Generate SonarQube token
        run: |
          echo "🔑 Generating SonarQube token..."
          TOKEN=$(curl -s -X POST -u admin:admin \
            -d "name=ci-token" \
            http://localhost:9000/api/user_tokens/generate | jq -r '.token')
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

      # 6️⃣ Run tests + coverage
      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          coverage run -m pytest || true
          coverage xml || true

      # 7️⃣ Set dynamic SonarQube project key
      - name: Set SonarQube project key
        run: |
          PROJECT_KEY=${GITHUB_REPOSITORY##*/}
          echo "PROJECT_KEY=$PROJECT_KEY" >> $GITHUB_ENV
          echo "Using project key: $PROJECT_KEY"

      # 8️⃣ Run SonarQube scan and capture CE task ID
      - name: Run Sonar Scanner
        id: sonar_scan
        run: |
          echo "🔍 Running SonarQube scanner..."
          SCAN_OUTPUT=$(sonar-scanner \
            -Dsonar.projectKey=$PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.python.coverage.reportPaths=coverage.xml 2>&1)
          
          echo "$SCAN_OUTPUT"

          # Extract CE task ID from stdout
          TASK_ID=$(echo "$SCAN_OUTPUT" | grep -oP 'id=\K[0-9a-f-]{36}')
          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV

      