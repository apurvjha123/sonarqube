name: SonarQube Scan Fast (Fail on Bad Code)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  sonar-docker:
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: --memory=2g

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest coverage unzip jq

          # Install sonar-scanner CLI
          curl -sSLo sonar-scanner.zip \
            https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME/
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Wait for SonarQube startup
        run: |
          echo "‚è≥ Waiting for SonarQube server..."
          for i in {1..60}; do
            STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
            echo "Attempt $i: Status=$STATUS"
            if [ "$STATUS" == "UP" ]; then
              echo "‚úÖ SonarQube is UP!"
              break
            fi
            sleep 5
          done

      - name: Run tests
        run: |
          coverage run -m pytest || true
          coverage xml || true

      - name: Set SonarQube project key
        run: |
          PROJECT_KEY=${GITHUB_REPOSITORY##*/}
          echo "PROJECT_KEY=$PROJECT_KEY" >> $GITHUB_ENV

      - name: Run Sonar Scanner and fail on issues
        run: |
          echo "üîç Running SonarQube scanner..."
          
          # Check if coverage.xml exists
          if [ ! -f coverage.xml ]; then
            echo "‚ö†Ô∏è coverage.xml not found, skipping coverage report."
            COVERAGE_ARG=""
          else
            COVERAGE_ARG="-Dsonar.python.coverage.reportPaths=coverage.xml"
          fi

          SCAN_OUTPUT=$(sonar-scanner \
            -Dsonar.projectKey=$PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin \
            $COVERAGE_ARG \
            -Dsonar.issuesReport.console.enable=true 2>&1)

          echo "$SCAN_OUTPUT"

          # Fail workflow if scanner finds any issue
          ISSUES=$(echo "$SCAN_OUTPUT" | grep -E 'CRITICAL|MAJOR|BLOCKER' || true)
          if [ ! -z "$ISSUES" ]; then
            echo "‚ùå SonarQube found issues!"
            echo "$ISSUES"
            exit 1
          else
            echo "‚úÖ No critical issues found by SonarQube."
          fi
