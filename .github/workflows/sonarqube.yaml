name: SonarQube Scan with Docker (Auto Token Fixed)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  sonar-docker:
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: >-
          --memory=2g

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3Ô∏è‚É£ Install dependencies if requirements.txt exists
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest coverage jq

          # Install sonar-scanner CLI
          curl -sSLo sonar-scanner.zip \
            https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME/
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      # 4Ô∏è‚É£ Wait for SonarQube server to be fully up
      - name: Wait for SonarQube startup
        run: |
          echo "‚è≥ Waiting for SonarQube server to be healthy..."
          for i in {1..60}; do
            STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
            echo "Attempt $i: SonarQube status = $STATUS"
            if [ "$STATUS" == "UP" ]; then
              echo "‚úÖ SonarQube is UP!"
              break
            fi
            sleep 5
          done
          if [ "$STATUS" != "UP" ]; then
            echo "‚ùå SonarQube did not start in time!"
            exit 1
          fi

      # 5Ô∏è‚É£ Generate admin token inside SonarQube
      - name: Generate token
        run: |
          echo "üîë Generating SonarQube token..."
          TOKEN=$(curl -s -X POST -u admin:admin \
            -d "name=ci-token" \
            http://localhost:9000/api/user_tokens/generate | jq -r '.token')
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

      # 6Ô∏è‚É£ Run tests + generate coverage
      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          coverage run -m pytest || true
          coverage xml || true

      # 7Ô∏è‚É£ Run SonarQube scan
      - name: Run Sonar Scanner
        run: |
          echo "üîç Running SonarQube scanner..."
          sonar-scanner \
            -Dsonar.projectKey=my_python_project \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.python.coverage.reportPaths=coverage.xml

      # 8Ô∏è‚É£ Check Quality Gate
      - name: Check Quality Gate
        run: |
          echo "üïí Checking SonarQube Quality Gate..."
          STATUS=$(curl -s -u admin:$SONAR_TOKEN \
            "http://localhost:9000/api/qualitygates/project_status?projectKey=my_python_project" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "‚ùå SonarQube Quality Gate failed!"
            exit 1
          else
            echo "‚úÖ SonarQube Quality Gate passed!"
